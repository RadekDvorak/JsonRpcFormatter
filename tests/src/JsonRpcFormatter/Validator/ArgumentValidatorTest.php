<?php

namespace JsonRpcFormatter\Validator;

require_once dirname(__FILE__) . '/../../../../src/JsonRpcFormatter/Validator/ArgumentValidator.php';

/**
 * Test class for ArgumentValidator.
 * Generated by PHPUnit on 2012-03-26 at 20:16:22.
 */
class ArgumentValidatorTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var ArgumentValidator
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new ArgumentValidator;
	}

	/**
	 * @dataProvider validIdProvider
	 */
	public function testIsValidId($id)
	{
		$this->assertTrue($this->object->isValidId($id));
	}

	/**
	 * @dataProvider invalidIdProvider
	 */
	public function testIsNotValidId($id)
	{
		$this->assertFalse($this->object->isValidId($id));
	}

	public function validIdProvider()
	{
		return array(
			array(null),
			array(200),
			array("test"),
		);
	}

	public function invalidIdProvider()
	{
		return array(
			array(new \stdClass),
			array(0.356),
			array(array("test")),
			array(fopen("php://memory", "r")),
			array(true)
		);
	}

	/**
	 * @dataProvider validParamProvider
	 */
	public function testIsValidParamsArgument($params)
	{
		$this->assertTrue($this->object->isValidParamsArgument($params));
	}

	/**
	 * @dataProvider invalidParamProvider
	 */
	public function testIsNotValidParamsArgument($params)
	{
		$this->assertFalse($this->object->isValidParamsArgument($params));
	}

	public function validParamProvider()
	{
		return array(
			array(new \stdClass),
			array(array("test")),
		);
	}

	public function invalidParamProvider()
	{
		return array(
			array(fopen("php://memory", "r")),
			array(true),
			array(0.356),
			array(null),
			array(200),
			array("test"),
		);
	}

	/**
	 * @dataProvider validMethodProvider
	 */
	public function testIsValidMethod($method)
	{
		$condition = $this->object->isValidMethod($method);
		$this->assertTrue($condition);
	}

	/**
	 * @dataProvider invalidMethodProvider
	 */
	public function testIsNotValidMethod($method)
	{
		$condition = $this->object->isValidMethod($method);
		$this->assertFalse($condition);
	}

	public function validMethodProvider()
	{
		return array(
			array("test"),
		);
	}

	public function invalidMethodProvider()
	{
		return array(
			array(fopen("php://memory", "r")),
			array(true),
			array(0.356),
			array(null),
			array("rpc.shallNotStartThisPhrase"),
			array(200),
			array(new \stdClass),
			array(array("test")),
		);
	}

	/**
	 *
	 * @dataProvider validErrorMessageProvider
	 */
	public function testIsValidErrorMessage($errorMessage)
	{
		$condition = $this->object->isValidErrorMessage($errorMessage);
		$this->assertTrue($condition);
	}

	/**
	 *
	 * @dataProvider invalidErrorMessageProvider
	 */
	public function testIsNotValidErrorMessage($errorMessage)
	{
		$condition = $this->object->isValidErrorMessage($errorMessage);
		$this->assertFalse($condition);
	}

	public function validErrorMessageProvider()
	{
		return array(
			array("test"),
		);
	}

	public function invalidErrorMessageProvider()
	{
		return array(
			array(fopen("php://memory", "r")),
			array(true),
			array(0.356),
			array(null),
			array(200),
			array(new \stdClass),
			array(array("test")),
		);
	}

	/**
	 *
	 * @dataProvider validErrorCodeProvider
	 */
	public function testIsValidErrorCode($errorCode)
	{
		$condition = $this->object->isValidErrorCode($errorCode);
		$this->assertTrue($condition);
	}

	/**
	 *
	 * @dataProvider invalidErrorCodeProvider
	 */
	public function testIsNotValidErrorCode($errorCode)
	{
		$condition = $this->object->isValidErrorCode($errorCode);
		$this->assertFalse($condition);
	}

	public function validErrorCodeProvider()
	{
		return array(
			array(200),
		);
	}

	public function invalidErrorCodeProvider()
	{
		return array(
			array(fopen("php://memory", "r")),
			array(true),
			array(0.356),
			array(null),
			array("test"),
			array(new \stdClass),
			array(array("test")),
		);
	}

	public function testGetLastErrorMessage()
	{
		$actual = $this->object->getLastErrorMessage();
		$this->assertInternalType('string', $actual);
	}

}
