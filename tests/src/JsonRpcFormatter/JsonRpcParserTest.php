<?php

namespace JsonRpcFormatter;

require_once dirname(__FILE__) . '/../../../src/JsonRpcFormatter/JsonRpcParser.php';

/**
 * Test class for JsonRpcParser.
 * Generated by PHPUnit on 2012-03-28 at 22:21:24.
 */
class JsonRpcParserTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var JsonRpcParser
	 */
	protected $object;

	/**
	 * @expectedException \InvalidArgumentException
	 */
	public function testConstructorFailure()
	{
		$nonStdClass = "text";
		$this->object = new JsonRpcParser($nonStdClass);
	}

	/**
	 * @covers JsonRpcFormatter\JsonRpcParser::getLastError
	 * @todo Implement testGetLastError().
	 */
	public function testGetLastError()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @dataProvider emptyJsonRpcProvider
	 */
	public function testIsJsonRpc($json, $valid)
	{
		$this->assertInstanceOf('\\stdClass', $json);
		$this->object = new JsonRpcParser($json);
		$this->assertEquals($valid, $this->object->isJsonRpc());
	}

	public function emptyJsonRpcProvider()
	{
		$return = array(
			array(json_decode('{"jsonrpc": "2.0"}'), true),
			array(json_decode('{"foo":""}'), false),
			
		);
		
		return $return;
	}

	/**
	 * @dataProvider validVersionJsonRpcProvider
	 */
	public function testHasCorrectVersion($json, $valid)
	{
		$this->assertInstanceOf('\\stdClass', $json);
		$this->object = new JsonRpcParser($json);
		$this->assertEquals($valid, $this->object->hasCorrectVersion());
	}

	public function validVersionJsonRpcProvider()
	{
		$return = array(
			array(json_decode('{"jsonrpc": "2.0"}'), true),
			array(json_decode('{"jsonrpc": 2}'), false),
			array(json_decode('{"jsonrpc": "XXX"}'), false),

		);

		return $return;
	}

	/**
	 * @covers JsonRpcFormatter\JsonRpcParser::isResponse
	 * @todo Implement testIsResponse().
	 */
	public function testIsResponse()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers JsonRpcFormatter\JsonRpcParser::isErrorObject
	 * @todo Implement testIsErrorObject().
	 */
	public function testIsErrorObject()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers JsonRpcFormatter\JsonRpcParser::tryBuildRequest
	 * @todo Implement testTryBuildRequest().
	 */
	public function testTryBuildRequest()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers JsonRpcFormatter\JsonRpcParser::tryBuildNotification
	 * @todo Implement testTryBuildNotification().
	 */
	public function testTryBuildNotification()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers JsonRpcFormatter\JsonRpcParser::tryBuildResponse
	 * @todo Implement testTryBuildResponse().
	 */
	public function testTryBuildResponse()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}

?>
