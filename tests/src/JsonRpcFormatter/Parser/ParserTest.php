<?php

namespace JsonRpcFormatter\Parser;

/**
 * Test class for Parser.
 * Generated by PHPUnit on 2012-04-07 at 11:26:32.
 */
class ParserTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Parser
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$validator = $this->getMock('\JsonRpcFormatter\Validator\ArgumentValidator');

		$validator->expects($this->any())
				->method($this->anything())
				->will($this->returnValue(true));

		$this->object = new Parser($validator);
	}

	/**
	 * @dataProvider invalidDataParsingProvider
	 * @expectedException \InvalidArgumentException
	 */
	public function testInvalidDataParsing($jsonString)
	{
		$this->object->parseJsonRpc2Message($jsonString);
	}

	public function invalidDataParsingProvider()
	{
		return array(
			array(null),
			array(new \Exception),
			array(M_PI),
			array(10),
			array(fopen("php://memory", "r")),
			array(array()),
			array("Invalid json string - non json"),
		);
	}

	/**
	 * @dataProvider notificationProvider
	 */
	public function testParseJsonRpc2Notification($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Notification($jsonString);
		$this->assertInstanceOf('\JsonRpcFormatter\Notification', $parsedObject);
	}

	public function notificationProvider()
	{
		return array(
			array('{"jsonrpc": "2.0", "method": "update", "params": [1,2,3,4,5]}'),
			array('{"jsonrpc": "2.0", "method": "foobar"}'),
		);
	}

	/**
	 * @expectedException \JsonRpcFormatter\Parser\ParseException
	 * @dataProvider invalidNotificationProvider
	 */
	public function testParseJsonRpc2NotificationFailure($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Notification($jsonString);
	}

	public function invalidNotificationProvider()
	{
		return array(
			// no method
			array('{"jsonrpc": "2.0", "params": [1,2,3,4,5]}'),
		);
	}

	/**
	 * @dataProvider requestProvider
	 */
	public function testParseJsonRpc2Request($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Request($jsonString);
		$this->assertInstanceOf('\JsonRpcFormatter\Request', $parsedObject);
	}

	public function requestProvider()
	{
		return array(
			array('{"jsonrpc": "2.0", "method": "subtract", "params": [42, 23], "id": 1}'),
			array('{"jsonrpc": "2.0", "method": "info", "id": 2}'),
		);
	}

	/**
	 * @expectedException \JsonRpcFormatter\Parser\ParseException
	 * @dataProvider invalidRequestProvider
	 */
	public function testParseJsonRpc2RequestFailure($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Request($jsonString);
	}

	public function invalidRequestProvider()
	{
		return array(
			// no method
			array('{"jsonrpc": "2.0", "params": [1,2,3,4,5], "id": 1}'),
			array('{"jsonrpc": "2.0", "method": "info", "params": [1,2,3,4,5]}'),
		);
	}

	/**
	 * @dataProvider responseProvider
	 */
	public function testParseJsonRpc2Response($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Response($jsonString);
		$this->assertInstanceOf('\JsonRpcFormatter\Response', $parsedObject);
	}

	public function responseProvider()
	{
		return array(
			array('{"jsonrpc": "2.0", "result": 19, "id": 1}'),
			array('{"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error.", "data": 3.14}, "id": null}'),
		);
	}

	/**
	 * @expectedException \JsonRpcFormatter\Parser\ParseException
	 * @dataProvider invalidResponseProvider
	 */
	public function testParseJsonRpc2ResponseFailure($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Response($jsonString);
	}

	public function invalidResponseProvider()
	{
		return array(
			// no id
			array('{"jsonrpc": "2.0", "result": 19}'),
			// neither result nor error
			array('{"jsonrpc": "2.0", "id": 1}'),
			// both result and error
			array('{"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error."}, "result": 19, "id": null}'),
		);
	}

	/**
	 * @dataProvider messageProvider
	 */
	public function testParseJsonRpc2Message($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Message($jsonString);
		$this->assertInstanceOf('\JsonRpcFormatter\Message', $parsedObject);
	}

	public function messageProvider()
	{
		return array_merge($this->responseProvider(), $this->notificationProvider(), $this->requestProvider());
	}

	/**
	 * @dataProvider invalidMessageProvider
	 * @expectedException \JsonRpcFormatter\Parser\ParseException
	 */
	public function testParseJsonRpc2MessageFailure($jsonString)
	{
		$parsedObject = $this->object->parseJsonRpc2Message($jsonString);
	}

	public function invalidMessageProvider()
	{
		return
				array(
					array('{"jsonrpc": "2.0", "result": 19}'),
					array('{"jsonrpc": "2.0", "id": 1}'),
					array('{"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error."}, "result": 19, "id": null}'),
					array('{"jsonrpc": "2.0", "params": [1,2,3,4,5]}'),
					array('{"jsonrpc": "2.0", "params": [1,2,3,4,5], "id": 1}'),
		);
	}

}

