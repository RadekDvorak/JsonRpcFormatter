<?php

namespace JsonRpcFormatter;

require_once dirname(__FILE__) . '/../../../src/JsonRpcFormatter/Response.php';

/**
 * Test class for Response.
 * Generated by PHPUnit on 2012-03-28 at 21:25:39.
 */
class ResponseTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Response
	 */
	protected $object;

	/**
	 * Test the method is not set yet
	 *
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testGetIdFail()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Response($validator);
		$this->object->getId();
	}

	public function testId()
	{
		$id = "ID-test";
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidId')
				->with($this->equalTo($id))
				->will($this->returnValue(true));
		$this->object = new Response($validator);

		$setterReturn = $this->object->setId($id);
		$this->assertInstanceOf('\JsonRpcFormatter\Response', $setterReturn);
		$this->assertEquals($id, $this->object->getId());

	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\UnexpectedValueException
	 */
	public function testSetIdFail()
	{
		$id = "ID-test";
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidId')
				->with($this->equalTo($id))
				->will($this->returnValue(false));
		$this->object = new Response($validator);
		
		$this->object->setId($id);
	}

	public function testGetVersion()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Response($validator);
		$this->assertSame('2.0', $this->object->getVersion());
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testGetResultFail()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Response($validator);
		$this->object->getResult();
	}

	public function testResult()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');

		$result = "Result-test";

		// need not set any attributes
		$error = new Error($validator);

		$this->object = new Response($validator);

		$this->assertFalse($this->object->hasResult());

		// set Error first to test it is cleared by result setter
		$this->object->setError($error);

		$this->assertFalse($this->object->hasResult());

		$setterReturn = $this->object->setResult($result);
		$this->assertInstanceOf('\JsonRpcFormatter\Response', $setterReturn);
		$this->assertEquals($result, $this->object->getResult());
		$this->assertTrue($this->object->hasResult());

		$this->setExpectedException('JsonRpcFormatter\Exception\LogicException');
		$this->object->getError();
	}
	

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testGetErrorFail()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Response($validator);
		$this->object->getResult();
	}

	public function testError()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');

		$result = "Result-test";

		// need not set any attributes
		$error = new Error($validator);

		$this->object = new Response($validator);

		$this->assertFalse($this->object->hasError());

		// set Result first to test it is cleared by error setter
		$this->object->setResult($result);

		$this->assertFalse($this->object->hasError());

		$setterReturn = $this->object->setError($error);
		$this->assertInstanceOf('\JsonRpcFormatter\Response', $setterReturn);
		$this->assertSame($error, $this->object->getError());
		$this->assertTrue($this->object->hasError());

		$this->setExpectedException('JsonRpcFormatter\Exception\LogicException');
		$this->object->getResult();
	}

	
	public function testJsonSerializeResult()
	{
		$id = "Id - test";
		$result = "Result-test";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidId')
				->with($this->equalTo($id))
				->will($this->returnValue(true));

		$this->object = new Response($validator);

		$this->object->setId($id);

		$this->object->setResult($result);

		$json = $this->object->jsonSerialize();
		$this->assertInstanceOf('\stdClass', $json);

		$this->assertObjectHasAttribute('jsonrpc', $json);
		$this->assertAttributeEquals('2.0', 'jsonrpc', $json);

		$this->assertObjectHasAttribute('id', $json);
		$this->assertAttributeEquals($id, 'id', $json);

		$this->assertObjectHasAttribute('result', $json);
		$this->assertAttributeEquals($result, 'result', $json);

		$this->assertObjectNotHasAttribute('error', $json);

		$this->assertCount(3, (array) $json);
	}

	public function testJsonSerializeError()
	{
		$id = "Id - test";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidId')
				->with($this->equalTo($id))
				->will($this->returnValue(true));

		$error = new Error($validator);

		$this->object = new Response($validator);

		$this->object->setId($id);

		$this->object->setError($error);

		$json = $this->object->jsonSerialize();
		$this->assertInstanceOf('\stdClass', $json);

		$this->assertObjectHasAttribute('jsonrpc', $json);
		$this->assertAttributeEquals('2.0', 'jsonrpc', $json);

		$this->assertObjectHasAttribute('id', $json);
		$this->assertAttributeEquals($id, 'id', $json);

		$this->assertObjectHasAttribute('error', $json);
		$this->assertAttributeEquals($error, 'error', $json);

		$this->assertObjectNotHasAttribute('result', $json);

		$this->assertCount(3, (array) $json);
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testJsonSerializeNoData()
	{
		$id = "Id - test";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidId')
				->with($this->equalTo($id))
				->will($this->returnValue(true));

		$this->object = new Response($validator);

		$this->object->setId($id);

		$json = $this->object->jsonSerialize();
	}

}
