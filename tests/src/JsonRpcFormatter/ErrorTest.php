<?php

namespace JsonRpcFormatter;

require_once dirname(__FILE__) . '/../../../src/JsonRpcFormatter/Error.php';

/**
 * Test class for Error.
 * Generated by PHPUnit on 2012-03-28 at 20:39:44.
 */
class ErrorTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Error
	 */
	protected $object;

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testGetCodeFail()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Error($validator);
		$this->object->getCode();
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\UnexpectedValueException
	 */
	public function testSetCode()
	{
		$arg = "Code-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidErrorCode')
				->will($this->returnValue(false));
		$this->object = new Error($validator);
		$this->object->setCode($arg);
	}

	public function testCode()
	{
		$arg = "Code-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidErrorCode')
				->with($this->equalTo($arg))
				->will($this->returnValue(true));
		$this->object = new Error($validator);
		$returnValue = $this->object->setCode($arg);
		$this->assertInstanceOf('\\JsonRpcFormatter\\Error', $returnValue);
		$this->assertEquals($arg, $this->object->getCode());
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testGetMessageFail()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Error($validator);
		$this->object->getMessage();
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\UnexpectedValueException
	 */
	public function testSetMessage()
	{
		$arg = "Message-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidErrorMessage')
				->will($this->returnValue(false));
		$this->object = new Error($validator);
		$this->object->setMessage($arg);
	}

	public function testMessage()
	{
		$arg = "Message-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidErrorMessage')
				->with($this->equalTo($arg))
				->will($this->returnValue(true));
		$this->object = new Error($validator);
		$returnValue = $this->object->setMessage($arg);
		$this->assertInstanceOf('\\JsonRpcFormatter\\Error', $returnValue);
		$this->assertEquals($arg, $this->object->getMessage());
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testGetDataFail()
	{
		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Error($validator);
		$this->object->getData();
	}

	public function testData()
	{
		$arg = "Data-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Error($validator);
		$returnValue = $this->object->setData($arg);
		$this->assertInstanceOf('\\JsonRpcFormatter\\Error', $returnValue);
		$this->assertEquals($arg, $this->object->getData());

		// test unset
		$this->setExpectedException('\\JsonRpcFormatter\\Exception\\LogicException');
		$this->object->unsetData();
		$this->object->getData();
	}

	/**
	 * @expectedException JsonRpcFormatter\Exception\LogicException
	 */
	public function testUnsetData()
	{
		$arg = "Data-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$this->object = new Error($validator);
		$this->object->setData($arg);

		// test unset
		$this->object->unsetData();
		$this->object->getData();
	}

	public function testJsonSerialize()
	{
		$message = "Message-asd";
		$code = "Code-asd";
		$data = "Data-asd";

		$validator = $this->getMock('JsonRpcFormatter\\Validator\\ArgumentValidator');
		$validator->expects($this->once())
				->method('isValidErrorMessage')
				->with($this->equalTo($message))
				->will($this->returnValue(true));
		$validator->expects($this->once())
				->method('isValidErrorCode')
				->with($this->equalTo($code))
				->will($this->returnValue(true));

		$this->object = new Error($validator);
		$this->object->setCode($code);
		$this->object->setMessage($message);
		$this->object->setData($data);

		$json = $this->object->jsonSerialize();

		$this->assertInstanceOf('\stdClass', $json);
		$this->assertObjectHasAttribute('code', $json);
		$this->assertObjectHasAttribute('message', $json);
		$this->assertObjectHasAttribute('data', $json);

		$this->assertEquals($code, $json->code);
		$this->assertEquals($message, $json->message);
		$this->assertEquals($data, $json->data);

		$this->assertCount(3, (array) $json);
	}

}

